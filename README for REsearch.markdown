Alexander Trotter 1644272
Eli Murray 1626960

# REsearch.java

## Overview

`REsearch.java` is a Java program that uses a Finite State Machine (FSM) to search for regex matches in a text file. It reads an FSM description from stdin (typically generated by `REcompile.java`) and checks each line of the input file for substrings that match the regex pattern. Matching lines are printed to stdout.

## Functionality

- **Input**:
  - FSM description via stdin, in the format `id,type,next1,next2` (same as output by `REcompile.java`).
  - A text file specified as a command-line argument.
- **Matching**:
  - Uses a nondeterministic FSM simulation to find any substring in a line that matches the regex.
  - Supports epsilon transitions (via `BR` states), literal characters, wildcards (`WC`), and an accept state (`ACCEPT`).
- **Output**: Prints each line from the input file that contains at least one substring matching the regex.
- **Error Handling**: Throws exceptions for invalid FSM formats or file I/O errors.

## Usage

1. Compile the program:
   ```bash
   javac REsearch.java
   ```
2. Run the following command to output the lines that match teh FSM, read in to standard in the file containing the FSM and the first argument to REsearch is the file to search:
   ```bash
   java REsearch input.txt < fsm.txt
   ```
3. The program reads the FSM from stdin and the file `input.txt`, printing all lines that contain a substring matching the regex. Example input file:
   ```
   abc
   xyz
   abbc
   ```
   Example output (for regex `a(b|c)*`):
   ```
   abc
   abbc
   ```

## Notes

- The program expects the FSM input to be well-formed, as produced by `REcompile.java`.
- It performs substring matching, not full-line matching, meaning it will print a line if any part of it matches the regex.
- The FSM simulation uses a set-based approach to track multiple active states, handling nondeterminism efficiently.
